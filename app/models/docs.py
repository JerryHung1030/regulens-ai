from typing import List, Dict, Any, Optional # Added Optional
from pathlib import Path
from pydantic import BaseModel, Field # Added Field


class RawDoc(BaseModel):
    id: str  # e.g., SHA256 of content or unique identifier
    source_path: Path
    content: str
    metadata: Dict[str, Any]  # e.g., page numbers for PDF, original filename
    doc_type: str  # e.g., "external_regulation", "procedure", "evidence"


class NormDoc(BaseModel):
    id: str  # can be same as RawDoc id or derived
    raw_doc_id: str
    text_content: str  # cleaned and normalized text
    sections: List[str]  # identified sections/chapters, if any
    metadata: Dict[str, Any]  # updated metadata
    doc_type: str


class EmbedSet(BaseModel):
    id: str  # e.g., hash of the NormDoc id + chunk index
    norm_doc_id: str
    chunk_text: str
    embedding: List[float]
    chunk_index: int
    total_chunks: int
    doc_type: str
    metadata: Dict[str, Any] = {}  # 添加 metadata 屬性，默認為空字典


class IndexMeta(BaseModel):
    index_file_path: Path  # Path to the .faiss file
    id_mapping_path: Path  # Path to the JSON file mapping FAISS index IDs to custom IDs (e.g., EmbedSet IDs)
    doc_type: str          # Type of documents indexed (e.g., "external_regulation", "procedure", "evidence")
    num_vectors: int       # Number of vectors in the index
    vector_dimension: int  # Dimension of the vectors (e.g., 1536 for text-embedding-ada-002, 3072 for text-embedding-3-large)
    model_name: str        # Name of the embedding model used to create these vectors (e.g., "text-embedding-3-large")


class AuditTask(BaseModel): # Define AuditTask first as ExternalRegulationClause references it
    id: str  # Unique identifier for the audit task
    sentence: str # Concise, precise sentence for retrieval, generated by LLM
    # status: str  # e.g., "pending", "in_progress", "completed" - Can be added later if needed
    # findings: List[str]  # List of findings or observations - Can be added later
    metadata: Dict[str, Any] = Field(default_factory=dict)  # Additional metadata
    top_k: Optional[List[Dict[str, Any]]] = Field(default_factory=list) # Stores retrieved evidence snippets
    compliant: Optional[bool] = None # Stores judgment from Step 4


class ExternalRegulationClause(BaseModel):
    id: str  # Unique identifier for the external_regulation clause
    title: Optional[str] = None # Title of the external_regulation clause
    text: str  # Text of the external_regulation clause
    metadata: Dict[str, Any] = Field(default_factory=dict)  # Additional metadata, e.g., source, section
    need_procedure: Optional[bool] = None  # To be determined by LLM in Step 1
    tasks: List[AuditTask] = Field(default_factory=list)  # To be populated by LLM in Step 2
